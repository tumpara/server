# Generated by Django 3.2.4 on 2021-06-14 15:52

from django.db import migrations, models
import django.db.models.deletion
import tumpara.storage.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(help_text='URI for the configured storage backend.', max_length=255, unique=True, validators=[tumpara.storage.models.validate_library_source], verbose_name='source')),
                ('context', models.CharField(help_text='Context string that identifies the content types to expect in the library.', max_length=50, verbose_name='context')),
            ],
            options={
                'verbose_name': 'library',
                'verbose_name_plural': 'libraries',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('path', models.CharField(help_text='Path of this file, relative to the library root.', max_length=255, verbose_name='filename')),
                ('digest', models.CharField(help_text="The file's cryptographic hash to quickly identify changes.", max_length=64, verbose_name='digest value')),
                ('last_scanned', models.DateTimeField(blank=True, help_text='Time the file was last scanned. This is used to determine changes.', null=True, verbose_name='scan timestamp')),
                ('orphaned', models.BooleanField(default=False, help_text='Whether this database entry is an orphan and could be deleted because the file on disk is gone.', verbose_name='orphaned status')),
                ('handler_object_id', models.UUIDField()),
                ('handler_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', related_query_name='file', to='storage.library', verbose_name='library')),
            ],
            options={
                'verbose_name': 'file',
                'verbose_name_plural': 'files',
            },
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['library', 'path', 'orphaned'], name='library_path_lookup_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['library', 'digest', 'orphaned'], name='library_digest_lookup_idx'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(condition=models.Q(('orphaned', False)), fields=('library', 'path'), name='active_path_unique_in_library'),
        ),
    ]
