# Generated by Django 3.2.4 on 2021-06-14 15:52

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import functools
import tumpara.storage.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('storage', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('archived', models.BooleanField(default=False, help_text='Determines whether this item has been marked as archived. Clients are advised to filter out archived items, unless explicitly asked for.', verbose_name='archived status')),
                ('name', models.CharField(help_text='Collection title given by the user.', max_length=150, verbose_name='name')),
            ],
            options={
                'verbose_name': 'collection',
                'verbose_name_plural': 'collections',
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('archived', models.BooleanField(default=False, help_text='Determines whether this item has been marked as archived. Clients are advised to filter out archived items, unless explicitly asked for.', verbose_name='archived status')),
                ('visibility', models.PositiveSmallIntegerField(choices=[(0, 'Public'), (1, 'All logged-in users'), (2, 'Library members'), (3, 'Only library owners')], default=2, help_text='Determines who can see this object.', verbose_name='visibility')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this entry was created / imported.', verbose_name='add timestamp')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Timestamp associated with this entry. For media content, this should be the date and time of recording.', verbose_name='timestamp')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Real-world location associated with this entry.', null=True, srid=4326, verbose_name='location')),
                ('stack_key', models.IntegerField(blank=True, default=None, help_text='Identifier that is the same for all entries on a stack.', null=True, verbose_name='stack key')),
                ('stack_representative', models.BooleanField(default=False, help_text="Designates whether this entry is it's stack's representative. It will be shown as the cover element when the stack is rendered.", verbose_name='stack representative status')),
                ('file', models.ForeignKey(blank=True, help_text='The file object associated with this entry, if any.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='storage.file', verbose_name='file')),
                ('library', models.ForeignKey(help_text='Library the object is attached to. Users will have access depending on the visibility and their membership in this library.', on_delete=django.db.models.deletion.CASCADE, to='storage.library', validators=[functools.partial(tumpara.storage.models.validate_library, *('timeline',), **{})], verbose_name='library')),
            ],
            options={
                'verbose_name': 'timeline entry',
                'verbose_name_plural': 'timeline entries',
                'ordering': ['timestamp', 'id'],
            },
        ),
        migrations.CreateModel(
            name='AlbumItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(help_text='The timeline collection the entry is placed in.', on_delete=django.db.models.deletion.CASCADE, to='timeline.album', verbose_name='collection')),
                ('entry', models.ForeignKey(help_text='The timeline entry associated with this object.', on_delete=django.db.models.deletion.CASCADE, to='timeline.entry', verbose_name='entry')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='album',
            name='items',
            field=models.ManyToManyField(related_name='containing_albums', related_query_name='containing_album', through='timeline.AlbumItem', to='timeline.Entry'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['timestamp', 'id', 'visibility', 'library', 'file'], name='timeline_for_user_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['-timestamp', 'id', 'visibility', 'library', 'file'], name='reverse_timeline_for_user_idx'),
        ),
        migrations.AddIndex(
            model_name='entry',
            index=models.Index(fields=['stack_key', 'id', 'visibility', 'library', 'file'], name='stack_content_for_user_idx'),
        ),
        migrations.AddConstraint(
            model_name='entry',
            constraint=models.UniqueConstraint(condition=models.Q(('stack_representative', True)), fields=('stack_key', 'stack_representative'), name='unique_representative_per_stack'),
        ),
        migrations.AddConstraint(
            model_name='entry',
            constraint=models.CheckConstraint(check=models.Q(('stack_key__isnull', False), ('stack_representative', False), _connector='OR'), name='not_a_representative_when_unstacked'),
        ),
    ]
